// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  EMAIL_ONLY
  GUEST
  REGISTERED
}

// User (Customers) Model
model Users {
  userId           String     @id @default(uuid())
  email            String     @unique
  passwordHash     String?
  firstName        String?
  lastName         String?
  addressId        String?
  address          Address?   @relation(fields: [addressId], references: [addressId])
  userType         UserType   @default(REGISTERED)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  stripeCustomerId String?
  Reviews          Reviews[] // each user can have multiple reviews
  Orders           Orders[]
  Cart             Carts?
  favoriteProducts Products[]
}

model Address {
  addressId String  @id @default(uuid())
  address   String
  city      String
  state     String
  zipCode   String
  country   String
  Users     Users[]
}

model OptInUser {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuestUser {
  id           String   @id @default(uuid())
  email        String   @unique
  sessionToken String?
  createdAt    DateTime
  updatedAt    DateTime
}

model RegisteredUser {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Products {
  productId       String                 @id
  name            String
  description     String
  price           Float
  stockQuantity   Int
  imageURL        String
  imageURL2       String[]
  primaryCategory String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  Reviews         Reviews[]
  Users           Users[]
  Categories      ProductCategories[]
  ProductVariants ProductVariants[]
  SubCategories   ProductSubCategories[]
}

model Variants {
  variantId     String            @id
  size          String // Foreign key to the size
  color         String // Foreign key to the color
  price         Float
  stockQuantity Int
  CartItems     CartItems[]
  OrderItems    OrderItems[]
  products      ProductVariants[]
}

model ProductVariants {
  variantId String
  productId String
  product   Products @relation(fields: [productId], references: [productId])
  variant   Variants @relation(fields: [variantId], references: [variantId])

  @@id([variantId, productId])
}

model Categories {
  categoryId    String              @id
  categoryName  String
  description   String?
  products      ProductCategories[]
  subcategories SubCategories[] // one category can have multiple subcategories
}

model SubCategories {
  subcategoryId   String                 @id @default(uuid())
  subcategoryName String
  categoryId      String //Foreign key to parent category
  categoryName    String
  category        Categories             @relation(fields: [categoryId], references: [categoryId])
  description     String?
  products        ProductSubCategories[] //Products related to this subcategory
}

//acts as a join table between Products and SubCategories
// many-to-many relationship
model ProductSubCategories {
  productId     String
  subcategoryId String
  product       Products      @relation(fields: [productId], references: [productId])
  subcategory   SubCategories @relation(fields: [subcategoryId], references: [subcategoryId])

  @@id([productId, subcategoryId])
}

model ProductCategories {
  productId  String
  categoryId String
  product    Products   @relation(fields: [productId], references: [productId])
  category   Categories @relation(fields: [categoryId], references: [categoryId])

  @@id([productId, categoryId]) //Composite primary key
}

model Reviews {
  reviewId  String   @id
  userId    String
  productId String
  rating    Float
  comment   String
  createdAt DateTime
  User      Users    @relation(fields: [userId], references: [userId]) // foreign key
  Products  Products @relation(fields: [productId], references: [productId]) // foreign key
}

enum DeliveryType {
  FREE_STANDARD
  GROUND
  EXPRESS
  NEXT_DAY
}

model Orders {
  orderId        String       @id @default(uuid())
  email          String
  userId         String
  shippingInfo   ShippingInfo @relation(fields: [shippingInfoId], references: [id])
  billingInfo    BillingInfo  @relation(fields: [billingInfoId], references: [id])
  totalAmount    Float
  paymentId      String?
  payment        PaymentInfo? @relation(fields: [paymentId], references: [paymentId])
  status         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Users          Users        @relation(fields: [userId], references: [userId])
  OrderItems     OrderItems[]
  shippingInfoId String
  billingInfoId  String
}

model OrderItems {
  orderItemId String   @id @default(uuid())
  orderId     String
  variantId   String
  size        String // Add this line if you need size stored directly in OrderItems
  color       String // Add this line if you need color stored directly in OrderItems
  quantity    Int
  price       Float
  Order       Orders   @relation(fields: [orderId], references: [orderId])
  variant     Variants @relation(fields: [variantId], references: [variantId])
}

model ShippingInfo {
  id             String       @id @default(uuid())
  firstName      String
  lastName       String
  address1       String
  address2       String
  city           String
  state          String
  zipCode        String
  country        String
  mobilePhone    String
  deliveryMethod DeliveryType @default(FREE_STANDARD)
  Orders         Orders[]
}

model BillingInfo {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  address1    String
  address2    String
  city        String
  state       String
  zipCode     String
  country     String
  mobilePhone String?
  Orders      Orders[]
}

enum PaymentType {
  CREDIT_CARD
  PAYPAL
  AFTERPAY
}

model PaymentInfo {
  paymentId   String      @id @default(uuid())
  paymentType PaymentType @default(CREDIT_CARD)
  Orders      Orders[]
}

model CartItems {
  cartItemId Int      @id @default(autoincrement())
  cartId     Int
  variantId  String
  quantity   Int
  variants   Variants @relation(fields: [variantId], references: [variantId])
  Cart       Carts    @relation(fields: [cartId], references: [cartId])
}

model Carts {
  cartId    Int         @id @default(autoincrement())
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  User      Users       @relation(fields: [userId], references: [userId])
  CartItems CartItems[]
}
